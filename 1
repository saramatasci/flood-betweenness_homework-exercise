import numpy as np
import pandas as pd
import networkx as nx
import geopandas as gpd
import matplotlib.pyplot as plt
import os


# general workspace settings
csvSeparator = ","
inputPath = os.getcwd() + "/data/zh"
outputPath = os.getcwd() + "/data/output"

# input data: the csv file for nodes and edges
nodesfile = inputPath + "/zh_nodes.shp"
edgesfile = inputPath + "/zh_roads.shp"
floodednodesfile = inputPath + "/zh_nodes_flooded.shp"
floodededgesfile = inputPath + "/zh_roads_flooded.shp"
floodmap = inputPath + "/WB_HW_IK100_F_LV03dissolve.shp"
# input data: the roads file
nodesgdf = gpd.read_file(nodesfile)
edgesgdf = gpd.read_file(edgesfile)
floodmapgdf = gpd.read_file(floodmap)

# input data: the flooded nodes and roads files
floodednodesgdf = gpd.read_file(floodednodesfile)
floodededgesgdf = gpd.read_file(floodededgesfile)

# create lists of flooded nodes and flooded edges (will not be part of the created graph
listoffloodednodes = floodednodesgdf["nodeid"].unique().tolist()
listoffloodededges = floodededgesgdf["ID_Road"].unique().tolist()
print(str(len(listoffloodednodes)) + " nodes are flooded")
print(str(len(listoffloodededges)) + " road segments are flooded")

# output data: the nodes distances file
nodesbetweennesscentralityfile = open(outputPath + "/betweennesscentrality_flooding.csv", "w")
nodesbetweennesscentralityfile.write("nodeid" + csvSeparator + "betweennesscentralityFLOOD" + "\n")

# create graph
G = nx.Graph()
# loop through the road shapefile
for index, row in edgesgdf.iterrows():
    if row.ID_Road not in listoffloodededges:
        length = row.SHAPE_Leng
        nodeid1 = row.nodeid1
        nodeid2 = row.nodeid2
        if row.nodeid1 not in listoffloodednodes:
            xcoord = nodesgdf[nodesgdf["nodeid"] == row.nodeid1].x
            ycoord = nodesgdf[nodesgdf["nodeid"] == row.nodeid1].y
            if row.nodeid1 not in G:
                xcoord1 = nodesgdf[nodesgdf["nodeid"] == row.nodeid1].x
                ycoord1 = nodesgdf[nodesgdf["nodeid"] == row.nodeid1].y
                G.add_node(row.nodeid1, pos=(xcoord1, ycoord1))
        if row.nodeid2 not in listoffloodednodes:
            xcoord = nodesgdf[nodesgdf["nodeid"] == row.nodeid2].x
            ycoord = nodesgdf[nodesgdf["nodeid"] == row.nodeid2].y
            if row.nodeid2 not in G:
                xcoord2 = nodesgdf[nodesgdf["nodeid"] == row.nodeid2].x
                ycoord2 = nodesgdf[nodesgdf["nodeid"] == row.nodeid2].y
                G.add_node(row.nodeid2, pos=(xcoord2, ycoord2))
        if row.nodeid1 not in listoffloodednodes and row.nodeid2 not in listoffloodednodes:
            G.add_edge(row.nodeid1, row.nodeid2, weight=length)
print("network graph created ...")

# calculate betweenness centrality for all nodes and write it to the output file
# Betweenness centrality of a node v is the sum of the fraction of all-pairs shortest paths that pass through v.
# parameter k is the number of the sample to safe time, k=1000 --> ca. 1% of the total network is taken as a sample
# if k=None, the full network will be considered. This needs some hours of computation
betweennesscentrality = nx.betweenness_centrality(G, k=1000, normalized=True, endpoints=True)
# betweennesscentrality=nx.betweenness_centrality(G, k=None, normalized=True, endpoints=True)
for n in betweennesscentrality:
    nodesbetweennesscentralityfile.write(str(n) + csvSeparator + str(betweennesscentrality[n]) + "\n")
nodesbetweennesscentralityfile.close()
print("betweenness centrality for nodes in ZH traffic network computed and exported to file (betweennesscentrality_floodsituation.csv)...")
